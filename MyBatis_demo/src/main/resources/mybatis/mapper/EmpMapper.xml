<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mybatis.mapper.EmpMapper">
    <!--
    property:设置映射关系中的属性名，必须是type属性所设置的实体类类型中的属性名
    column:设置映射关系中的字段名，必须是sql语句查询出的字段名
    -->
    <resultMap id="empResultMap" type="Emp">
        <!--id设置主键的映射关系-->
        <id property="eid" column="eid"></id>
        <!--result设置其他字段的映射关系-->
        <result property="empName" column="emp_name"></result>
        <result property="age" column="age"></result>
        <result property="sex" column="sex"></result>
        <result property="email" column="email"></result>
        <!--collection处理一对多-->
        <!--association处理多对一-->
    </resultMap>

    <!--List<Emp> getAllEmp();-->
    <!--设置自定义映射-->
    <select id="getAllEmp" resultMap="empResultMap">
        <!--在表的字段名和实体类的属性名不一致时候，可以设置别名-->
        <!--select eid,emp_name as empName,age,sex,email from t_emp;-->
        <!--设置去全局配置，将_自动映射成驼峰-->
        select * from t_emp
    </select>
    <!--List<Emp> getAllEmp();-->
    <select id="getAllEmpold" resultType="Emp">
        <!--在表的字段名和实体类的属性名不一致时候，可以设置别名-->
        <!--select eid,emp_name as empName,age,sex,email from t_emp;-->
        <!--设置去全局配置，将_自动映射成驼峰-->
        select * from t_emp
    </select>

    <!--处理多对一映射关系方式一：级联属性赋值-->
    <resultMap id="empAndDeptResultMap" type="Emp">
        <id property="eid" column="eid"></id>
        <result property="empName" column="emp_name"></result>
        <result property="age" column="age"></result>
        <result property="sex" column="sex"></result>
        <result property="email" column="email"></result>
        <result property="dept.did" column="did"></result>
        <result property="dept.deptName" column="dept_name"></result>
    </resultMap>

    <!--处理多对一映射关系方式二：级联属性赋值-->
    <resultMap id="empAndDeptResultMapTwo" type="Emp">
        <id property="eid" column="eid"></id>
        <result property="empName" column="emp_name"></result>
        <result property="age" column="age"></result>
        <result property="sex" column="sex"></result>
        <result property="email" column="email"></result>
        <!--
        association:处理多对一的映射关系
        property:需要处理多对的映射关系的属性名
        javaType：该属性的类型
        -->
        <association property="dept" javaType="Dept">
            <id property="did" column="did"></id>
            <result property="deptName" column="dept_name"></result>
        </association>
    </resultMap>


    <!--Emp getEmpAndDept(Integer eid);-->
    <select id="getEmpAndDept" resultMap="empAndDeptResultMapTwo">
        select * from t_emp left join t_dept on t_emp.did = t_dept.did where t_emp.did = #{eid}
    </select>


    <resultMap id="empAndDeptByStepResultMap" type="Emp">
        <id property="eid" column="eid"></id>
        <result property="empName" column="emp_name"></result>
        <result property="age" column="age"></result>
        <result property="sex" column="sex"></result>
        <result property="email" column="email"></result>
        <!--fetchType="eager" 当开启了全局的延迟加载之后，可通过此属性手动控制延迟加载的效果，表示不开启延迟加载-->
        <!--fetchType="lazy"  表示开启延迟加载-->
        <association property="dept"
                     select="mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo"
                     column="did"

                     fetchType="eager">

        </association>
    </resultMap>

    <!--Emp getEmpAndDeptByStepOne(@Param("eid") Integer eid);-->
    <select id="getEmpAndDeptByStepOne" resultMap="empAndDeptByStepResultMap">
        select * from t_emp where eid = #{eid}
    </select>

    <!--List<Emp> getDeptAndEmpByStepTwo(@Param("did") Integer did);-->
    <select id="getDeptAndEmpByStepTwo" resultType="Emp">
        select * from t_emp where did = #{did}
    </select>

</mapper>